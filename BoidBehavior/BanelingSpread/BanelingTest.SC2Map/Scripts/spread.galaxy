include "TriggerLibs/NativeLib"

int gTeamNumber = 1;
int gMyUnitCount = 0;
unit[1000] gMyUnitList;
int gOtherUnitCount = 0;
unit[1000] gOtherUnitList;
string[24] gMyPossibleUnits;
unit[1000] gRespondedBanelings;
int gNumRespondedBanelings = 0;

void RegisterTriggers()
{
     trigger t = TriggerCreate("OnUnitDeath");
     TriggerAddEventUnitDied(t, null); // null here means any unit.
     t = TriggerCreate("OnUnitCreated");
     TriggerAddEventUnitCreated(t, null, null, null); // trigger, creator, ability, behavior
}

void mapInitiated() {
  int i = 0;

  RegisterTriggers();

  // Initialize globals
  gMyPossibleUnits[0] = "Banshee";
  gMyPossibleUnits[1] = "Battlecruiser";
  gMyPossibleUnits[2] = "Cyclone";
  gMyPossibleUnits[3] = "Ghost";
  gMyPossibleUnits[4] = "Hellbat (Battle Mode)";
  gMyPossibleUnits[5] = "Hellion";
  gMyPossibleUnits[6] = "HERC";
  gMyPossibleUnits[7] = "Liberator (AA)";
  gMyPossibleUnits[8] = "Liberator (AG)";
  gMyPossibleUnits[9] = "Marauder";
  gMyPossibleUnits[10] = "Marine";
  gMyPossibleUnits[11] = "Medivac";
  gMyPossibleUnits[12] = "MULE";
  gMyPossibleUnits[13] = "Point Defense Drone";
  gMyPossibleUnits[14] = "Raven";
  gMyPossibleUnits[15] = "Reaper";
  gMyPossibleUnits[16] = "SCV";
  gMyPossibleUnits[17] = "Seeker Missle";
  gMyPossibleUnits[18] = "Siege Tank (Siege Mode)";
  gMyPossibleUnits[19] = "Siege Tank (Tank Mode)";
  gMyPossibleUnits[20] = "Thor - Explosive Paylode Mode";
  gMyPossibleUnits[21] = "Thor - High Impact Mode";
  gMyPossibleUnits[22] = "Viking (Assault Mode)";
  gMyPossibleUnits[23] = "Viking (Fighter Mode)";

  // Set up scenario
  i = 0;
  for (; i < 1; i+=1) {
    UnitCreate(24, "Marine", c_unitCreateIgnorePlacement, 1, PointFromName("CameraStart"), 270.0);
  }
  i = 0;
  for (; i < 1; i+=1) {
    UnitCreate(8, "Baneling", c_unitCreateIgnorePlacement, 2, PointFromName("EnemyStart"), 270.0);
  }
}

fixed NormalizeX(fixed x, fixed y) {
  fixed length = SquareRoot(((x) * (x)) + ((y) + (y)));
  return x / length;
}

fixed NormalizeY(fixed x, fixed y) {
  fixed length = SquareRoot(((x) * (x)) + ((y) + (y)));
  return y / length;
}

bool OnUnitDeath(bool checkConds, bool runActions)
{
     unit dyingUnit = EventUnit(); // the unit that just died.
     string unitType = UnitGetType( dyingUnit );
     text unitName = UnitTypeGetName( unitType );

     //UIDisplayMessage( PlayerGroupAll(), c_messageAreaChat, unitName );
     return true;
}

bool OnUnitCreated(bool checkConds, bool runActions)
{
  unit createdUnit = EventUnitCreatedUnit();
  string unitType = UnitGetType(createdUnit);
  text unitName = UnitGetName(createdUnit);
  bool isMine = false;
  int i = 0;
  trigger t;
  // If the created unit is on our team

  //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(unitType));

  i = 0;
  for (; i < 24; i += 1) {
    if (unitType == gMyPossibleUnits[i]) {
      isMine = true;
    }
  }

  if (isMine)
  {
    gMyUnitList[gMyUnitCount] = createdUnit;
    gMyUnitCount += 1;
    t = TriggerCreate("OnUnitRange");
    TriggerAddEventUnitRange(t, null, createdUnit, 10.0, true);

    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("My Unit Created"));
  } else {
    gOtherUnitList[gOtherUnitCount] = createdUnit;
    gOtherUnitCount += 1;

    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Enemy Unit Created"));
  }

  return true;
}

bool OnUnitRange(bool checkConds, bool runActions)
{
  unit originatingUnit = EventUnitRangeUnit();
  text originatingUnitName = UnitGetName(originatingUnit);
  unit enteringUnit = EventUnit();
  text enteringUnitName = UnitGetName(enteringUnit);
  int i = 0;
  int k = 0;
  int m = 0;
  fixed originatingX;
  fixed originatingY;
  fixed otherX;
  fixed otherY;
  fixed rangeSquared = 15*15;
  unit[1000] currentUnitGroup;
  int currentUnitGroupCount = 1;
  bool inCurrentGroup;
  fixed centerX = 0;
  fixed centerY = 0;
  fixed xDistance;
  fixed yDistance;
  fixed normalizedX;
  fixed normalizedY;
  fixed perpendicularX;
  fixed perpendicularY;
  unit [1000] sortedCurrentUnits;
  fixed dotProduct;
  fixed otherDotProduct;
  int idealIndex;
  int groupSize;
  int numGroups = 5;
  fixed splitDistance = 2.0;
  bool shouldRespond = true;

  currentUnitGroup[0] = originatingUnit;

  if (UnitIsAlive(originatingUnit) && UnitIsAlive(enteringUnit)) {
    if (UnitGetType(enteringUnit) == "Baneling") {
      i = 0;
      for (; i < gNumRespondedBanelings; i += 1) {
        if (gRespondedBanelings[i] == enteringUnit) {
          shouldRespond = false;
        }
      }
      if (shouldRespond == false) {
        return true;
      } else {
        gRespondedBanelings[gNumRespondedBanelings] = enteringUnit;
        gNumRespondedBanelings += 1;
      }

      UIDisplayMessage( PlayerGroupAll(), c_messageAreaChat, StringToText("rangeEvent: ") + originatingUnitName + StringToText(" in range of ") + enteringUnitName );

      // One of our units has come in range of a baneling. We should handle behavior here
      i = 0;
      for (; i < currentUnitGroupCount; i += 1) {
        k = 0;
        for (; k < gMyUnitCount; k += 1) {
          inCurrentGroup = false;
          m = 0;
          for (; m < currentUnitGroupCount; m += 1) {
            if (gMyUnitList[k] == currentUnitGroup[m]) {
              inCurrentGroup = true;
            }
          }

          if (inCurrentGroup == false) {
            // This unit is not in our current unit group
            originatingX = (PointGetX(UnitGetPosition(currentUnitGroup[i])));
            originatingY = (PointGetY(UnitGetPosition(currentUnitGroup[i])));
            otherX = (PointGetX(UnitGetPosition(gMyUnitList[k])));
            otherY = (PointGetY(UnitGetPosition(gMyUnitList[k])));
            if ((((otherX - originatingX) * (otherX - originatingX)) + (otherY - originatingY) * (otherY - originatingY)) < rangeSquared) {
              // Other unit is within the grouping range of one of our group's units. This allows our group to cascade out from the original unit
              currentUnitGroup[currentUnitGroupCount] = gMyUnitList[k];
              currentUnitGroupCount += 1;
            }
          }
        }
      }

      // Upon reaching this point, our current unit group should be filled with all units within this grouping range
      //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Units in group: " + IntToString(currentUnitGroupCount)));
      // Find the center point of the group
      i = 0;
      for (; i < currentUnitGroupCount; i+=1) {
        centerX += (PointGetX(UnitGetPosition(currentUnitGroup[i])));
        centerY += (PointGetY(UnitGetPosition(currentUnitGroup[i])));
      }
      centerX /= IntToFixed(currentUnitGroupCount);
      centerY /= IntToFixed(currentUnitGroupCount);
      // Determine what direction the Baneling is coming from
      otherX = (PointGetX(UnitGetPosition(enteringUnit)));
      otherY = (PointGetY(UnitGetPosition(enteringUnit)));
      xDistance = otherX - centerX;
      yDistance = otherY - centerY;
      normalizedX = NormalizeX(xDistance, yDistance);
      normalizedY = NormalizeY(xDistance, yDistance);
      // Find the perpendicular line to organize the units along
      perpendicularX = -normalizedY;
      perpendicularY = normalizedX;
      // Sort the units based on their distance along this line


      // Now that our units are sorted along the line, we can break them up into groups based and assign them positions to go
      groupSize = currentUnitGroupCount / numGroups;
      i = 0;
      for (; i < currentUnitGroupCount; i += 1) {
        if (i == 0) {
            UnitIssueOrder(currentUnitGroup[i], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(enteringUnit)), c_orderQueueReplace);
        } else if (i / groupSize == 0) {
          // Move -2 spaces
          UnitIssueOrder(currentUnitGroup[i], OrderTargetingPoint(AbilityCommand("move", 0), Point(centerX - 2.0 * splitDistance * perpendicularX, centerY - 2 * splitDistance * perpendicularY)), c_orderQueueReplace);
        } else if (i / groupSize == 1) {
          // Move -1 space
          UnitIssueOrder(currentUnitGroup[i], OrderTargetingPoint(AbilityCommand("move", 0), Point(centerX - 1 * splitDistance * perpendicularX, centerY - 1 * splitDistance * perpendicularY)), c_orderQueueReplace);
        } else if (i / groupSize == 2) {
          // Move to center
          UnitIssueOrder(currentUnitGroup[i], OrderTargetingPoint(AbilityCommand("move", 0), Point(centerX, centerY)), c_orderQueueReplace);
        } else if (i / groupSize == 3) {
          // Move 1 space
          UnitIssueOrder(currentUnitGroup[i], OrderTargetingPoint(AbilityCommand("move", 0), Point(centerX + 1 * splitDistance * perpendicularX, centerY + 1 * splitDistance * perpendicularY)), c_orderQueueReplace);
        } else {
          // Move 2 spaces
          UnitIssueOrder(currentUnitGroup[i], OrderTargetingPoint(AbilityCommand("move", 0), Point(centerX + 2 * splitDistance * perpendicularX, centerY + 2 * splitDistance * perpendicularY)), c_orderQueueReplace);
        }
      }
    }
  }

  return true;
}
