void MacroStructureAddAddOn(unit u) {
    int i = 0;
    for (; i < gMyStructureCount; i += 1) {
        if (gMyStructureList[i].friendly == u) {
            gMyStructureList[i].hasAddOn = true;
            break;
        }
    }
}

order MacroPurchaseGetOrder(string item, string structure, unit scv) {
    order orderToReturn = Order(AbilityCommand("stopProtossBuilding", 2));
    if (structure == "CommandCenter") {
        if (item == "SCV") {
            orderToReturn = Order(AbilityCommand("CommandCenterTrain", 0));
        }
    } else if (structure == "Barracks") {
        if (item == "Marine") {
            orderToReturn = Order(AbilityCommand("BarracksTrain", 0));
        } else if (item == "TechLab") {
            orderToReturn = OrderTargetingPoint(AbilityCommand("BarracksAddOns", 0), UnitTypePlacementFromPoint("CommandCenter", gTeamNumber, PointFromName("Barracks"), 20));
        } else if (item == "Marauder") {
            orderToReturn = Order(AbilityCommand("BarracksTrain", 3));
        } else if (item == "StimPack") {
            orderToReturn = Order(AbilityCommand("BarracksTechLabResearch", 0));
        } else if (item == "Reactor") {
            orderToReturn = OrderTargetingPoint(AbilityCommand("BarracksAddOns", 1), UnitTypePlacementFromPoint("CommandCenter", gTeamNumber, PointFromName("Barracks"), 20));
        } else if (item == "CombatShield") {
            orderToReturn = Order(AbilityCommand("BarracksTechLabResearch", 1));
        }
    } else if (structure == "SCV") {
        if (item == "SupplyDepot") {
            orderToReturn = OrderTargetingPoint(AbilityCommand("TerranBuild", 1), UnitTypePlacementFromPoint(item, 2, PointFromName("SupplyDepots"), 20));
        } else if (item == "Barracks") {
            orderToReturn = OrderTargetingPoint(AbilityCommand("TerranBuild", 3), UnitTypePlacementFromPoint("Barracks", 2, PointFromName("Barracks"), 20));
        } else if (item == "Refinery") {
            orderToReturn = OrderTargetingUnit(AbilityCommand("TerranBuild", 2), UnitGroupClosestToPoint(UnitGroupFromId(2), UnitGetPosition(scv)));
        }
    } else {
        if (gDebugChatOn) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Structure unsupported and failed to find order with structure: " + structure + " item: " + item));
        }
    }
    return orderToReturn;
}

bool MacroMakePurchase(string item, string structure) {
    // First, we'll list a databank for what calls should be made for each structure, usting the syntax Structure: Item -> Order. All orders should be used in the format UnitIssueOrder(structureUnit, Order(AbilityCommand("Ability", index)), c_orderQueueAddToEnd);
    //// CommandCenter: SCV -> AbilityCommand("CommandCenterTrain", 0)
    //// Barracks: Marine -> AbilityCommand("BarracksTrain", 0)
    //// Barracks: TechLab -> AbilityCommand("BarracksTechLabResearch", 0) OR AbilityCommand("BarracksAddOns", 30)
    //// SCV: Barracks -> Not sure yet

    // Set up our local variables
    int i = 0;
    int k = 0;
    bool foundStructure = false;
    unit structureToBuild;
    int ordersOnStructure = 99;
    int orderQueuePosition = 6;
    order orderToUse;
    order tempSCVOrder;

    // Next lets grab the order that we should use so long as we aren't using an SCV as our builder, as the SCV requires the unit first
    if (structure != "SCV") {
        orderToUse = MacroPurchaseGetOrder(item, structure, gMyUnitList[0].friendly);
    }

    // Now lets find a living structure that we need
    if (structure == "SCV") {
        for (; i < gMyUnitCount; i += 1) {
            if (structure == UnitGetType(gMyUnitList[i].friendly)) {
                // We have an SCV that can do this
                // TODO ensure that this is the optimal SCV and is not already assigned or can be removed from its assignment
                if (ordersOnStructure > UnitOrderCount(gMyUnitList[i].friendly)) {
                    tempSCVOrder = MacroPurchaseGetOrder(item, structure, gMyUnitList[i].friendly);
                    if (UnitOrderIsValid(gMyUnitList[i].friendly, tempSCVOrder)) {
                        orderToUse = tempSCVOrder;
                        structureToBuild = gMyUnitList[i].friendly;
                        foundStructure = true;
                        ordersOnStructure = UnitOrderCount(structureToBuild);
                    }
                }
            }
        }
    } else {
        for (; i < gMyStructureCount; i += 1) {
            if (structure == UnitGetType(gMyStructureList[i].friendly)) {
                // We have a structure that can do this purchase
                if (UnitOrderIsValid(gMyStructureList[i].friendly, orderToUse) && ((item != "TechLab" && item != "Reactor") || gMyStructureList[i].hasAddOn == false)) {
                    k = 0;
                    for (; k < orderQueuePosition; k += 1) {
                        if (orderQueuePosition > k && UtilsUnitQueueSlotEmpty(gMyStructureList[i].friendly, k)) {
                            structureToBuild = gMyStructureList[i].friendly;
                            foundStructure = true;
                            ordersOnStructure = k;
                            orderQueuePosition = k;
                        }
                    }
                }
            }
        }
    }

    // Now we need to issue the order to build based off of what structure/item combination is being ordered
    if (foundStructure) {
        if (structure == "SCV") {
            UnitIssueOrder(structureToBuild, orderToUse, c_orderQueueAddToFront);
        } else if (AbilityCommandGetAbility(OrderGetAbilityCommand(orderToUse)) != "stopProtossBuilding") {
            UnitIssueOrder(structureToBuild, orderToUse, c_orderQueueAddToEnd);
            if (item == "TechLab" || item == "Reactor") {
                MacroStructureAddAddOn(structureToBuild);
            }
        } else {
            if (gDebugChatOn) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Structure unsupported and failed to make purchase with structure: " + structure + " item: " + item));
            }
            return false;
        }

        if (gDebugChatOn) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(structure + " building " + item));
            //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Remaining Minerals: " + IntToString(PlayerGetPropertyInt(gTeamNumber, c_playerPropMinerals))));
        }
        return true;
    }

    // If we reach this, it means that we don't have the necessary structure
    if (gDebugChatOn) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Failed to make purchase and found no structure: " + structure + " with item: " + item));
    }
    return false;
}

bool MacroOnMineralsPropertyChanged(bool checkConds, bool runActions) {
    int i = 0;
    if (gDebugChatOn && gMineralCountOn) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Current minerals: ") + IntToText(PlayerGetPropertyInt(gTeamNumber, c_playerPropMinerals)) + StringToText(" Current Vespene: ") + IntToText(PlayerGetPropertyInt(gTeamNumber, c_playerPropVespene)));
    }
    // Determine if we have the necessary amount of minerals for our next purchase action
    if (gPurchaseListCount > 0 && PlayerGetPropertyInt(gTeamNumber, c_playerPropMinerals) >= gPurchaseList[0].mineralPrice && PlayerGetPropertyInt(gTeamNumber, c_playerPropVespene) >= gPurchaseList[0].vespenePrice) {
        if (gDebugChatOn) {
            //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Attempting to purchase: " + gPurchaseList[0].item));
        }
        // Make the purchase
        if (MacroMakePurchase(gPurchaseList[0].item, gPurchaseList[0].structureToPurchaseFrom)) {
            // Shift all purchase items down 1
            UtilsMadePurchase(0);
        }
    }

    return true;
}
