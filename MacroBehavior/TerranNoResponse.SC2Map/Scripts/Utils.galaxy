// UNITS
bool UtilsIsUnitMyUnit(unit u) {
    string unitType = UnitGetType(u);
    int i = 0;
    for (; i < 24; i += 1) {
        if (unitType == gMyPossibleUnits[i]) {
            return true;
        }
    }
    return false;
}

bool UtilsIsUnitMyStructure(unit u) {
    string unitType = UnitGetType(u);
    int i = 0;
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Checking if my structure: " + unitType));
    for (; i < 30; i += 1) {
        if (unitType == gMyPossibleStructures[i]) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Is my structure: " + unitType));
            return true;
        }
    }
    return false;
}

bool UtilsIsUnitEnemyStructure(unit u) {
    string unitType = UnitGetType(u);
    int i = 0;
    for (; i < 23; i += 1) {
        if (unitType == gEnemyPossibleStructures[i]) {
            return true;
        }
    }
    return false;
}

bool UtilsDeleteMyUnit(unit u) {
    int i = 0;
    bool foundUnit = false;
    for (; i < gMyUnitCount; i += 1) {
        if (u == gMyUnitList[i].friendly) {
            foundUnit = true;
        }
        if (foundUnit == true) {
            gMyUnitList[i].friendly = gMyUnitList[i+1].friendly;
            gMyUnitList[i].assigned = gMyUnitList[i+1].assigned;
            gMyUnitList[i].groupName = gMyUnitList[i+1].groupName;
        }
    }
    if (foundUnit) {
        gMyUnitCount -= 1;
    }
    return foundUnit;
}

bool UtilsDeleteMyStructure(unit u) {
    int i = 0;
    bool foundUnit = false;
    for (; i < gMyStructureCount; i += 1) {
        if (u == gMyStructureList[i].friendly) {
            foundUnit = true;
        }
        if (foundUnit == true) {
            gMyStructureList[i].friendly = gMyStructureList[i+1].friendly;
            gMyStructureList[i].assigned = gMyStructureList[i+1].assigned;
        }
    }
    if (foundUnit) {
        gMyStructureCount -= 1;
    }
    return foundUnit;
}

bool UtilsDeleteEnemyUnit(unit u) {
    int i = 0;
    bool foundUnit = false;
    for (; i < gEnemyUnitCount; i += 1) {
        if (u == gEnemyUnitList[i].enemy) {
            foundUnit = true;
        }
        if (foundUnit == true) {
            gEnemyUnitList[i].enemy = gEnemyUnitList[i+1].enemy;
            gEnemyUnitList[i].assignedDamage = gEnemyUnitList[i+1].assignedDamage;
        }
    }
    if (foundUnit) {
        gEnemyUnitCount -= 1;
    }
    return foundUnit;
}

bool UtilsDeleteEnemyStructure(unit u) {
    int i = 0;
    bool foundUnit = false;
    for (; i < gEnemyStructureCount; i += 1) {
        if (u == gEnemyStructureList[i].enemy) {
            foundUnit = true;
        }
        if (foundUnit == true) {
            gEnemyStructureList[i].enemy = gEnemyStructureList[i+1].enemy;
            gEnemyStructureList[i].assignedDamage = gEnemyStructureList[i+1].assignedDamage;
        }
    }
    if (foundUnit) {
        gEnemyStructureCount -= 1;
    }
    return foundUnit;
}
unit findSlowestPointinGroup(string mygroupName){
  int minspeed=1000000;
  unit slowest;
  int speed;
  int i;
  for(i=0; i<1000; i+=1){
    if(gMyUnitList[i].groupName!=mygroupName){//gMyUnitList[i]==null||
      continue;
    }
    speed=UnitGetPropertyInt(gMyUnitList[i].friendly,c_unitPropMovementSpeed,true);
    if(speed<minspeed){
      minspeed=speed;
      slowest=gMyUnitList[i].friendly;
    }

  }
  return slowest;
}
void stutterStep(unit me, unit enemy){
    point enemyPosition=UnitGetPosition(enemy);
    point ourPosition=UnitGetPosition(me);
    fixed x1=PointGetX(ourPosition);
    fixed y1=PointGetY(ourPosition);
    fixed x2=PointGetX(enemyPosition);
    fixed y2=PointGetY(enemyPosition);
    point target;

    fixed x;
    fixed y;
    fixed k;
    fixed distance;
    distance=SquareRoot(Pow(x1-x2, 2)+Pow(y1-y2, 2));
    k=(y2-y1)/(x2-x1);

    if(x1<x2){
      x=x1-2/SquareRoot(1+k*k);
    }else{
      x=x1+2/SquareRoot(1+k*k);
    }
    y=k*(x-x1)+y1;
    target=Point(x, y);
    if(distance>=3){
      UnitIssueOrder(me, OrderTargetingUnit(AbilityCommand("attack", 0), enemy), c_orderQueueAddToFront);
      UnitIssueOrder(me, OrderTargetingPoint(AbilityCommand("move", 0), target), c_orderQueueAddToFront);
    }else{
        UnitIssueOrder(me, OrderTargetingUnit(AbilityCommand("attack", 0), enemy), c_orderQueueAddToFront);
    }

}
void groupStutter(string mygroupName, unit enemy){
  int i;
  for(i=0; i<1000; i+=1){
    if(gMyUnitList[i].groupName==mygroupName){//gMyUnitList[i]==null||
      stutterStep(gMyUnitList[i].friendly, enemy);
    }
  }
}

void longTravel(unitgroup group, string groupName, string pointName){
  unit leader;
  leader=findSlowestPointinGroup(groupName);
  UnitGroupRemove(group, leader);
  UnitIssueOrder(leader, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(pointName)), c_orderQueueReplace);
  UnitGroupIssueOrder(group, OrderTargetingUnit(AbilityCommand("move", 0), leader), c_orderQueueAddToFront);
}
bool UtilsOnUnitCreated(bool checkConds, bool runActions)
{
    // This method should register each unit created in our unit list or the enemy unit list for future reference
    unit createdUnit = EventUnitCreatedUnit();
    string unitType = UnitGetType(createdUnit);
    text unitName = UnitGetName(createdUnit);
    bool isMine = false;
    bool isStructure = false;
    int i = 0;
    bool foundGroup = false;
    string groupNameToUse;
    trigger t;
    int numAssigned = 0;

    // Determine if the unit that was created is one of my units
    if (UtilsIsUnitMyUnit(createdUnit)) {
        isMine = true;
    }

    // If we have not already found our unit, determine if the unit that was created is one of my structures
    if (isMine == false) {
        if (UtilsIsUnitMyStructure(createdUnit)) {
            isMine = true;
            isStructure = true;
        }

        // If we have not already found our unit, determine if the unit that was created is one of the enemy's structures
        if (isMine == false) {
            if (UtilsIsUnitEnemyStructure(createdUnit)) {
                isStructure = true;
            }

            // If we have failed to determine anything at this point, then we can assume that the unit is one of the enemy's units
        }
    }

    // Handle the unit being created in our memory
    if (isMine == true && isStructure == false)
    {
        // The unit is one of our units
        gMyUnitList[gMyUnitCount].friendly = createdUnit;
        gMyUnitList[gMyUnitCount].assigned = false;
        if (UnitGetType(createdUnit) == "SCV") {
            gMyUnitList[gMyUnitCount].groupName = "SCVGroup" + IntToString(gCurrentlyCreatingSCVGroup);
        } else {
            gMyUnitList[gMyUnitCount].groupName = "AttackWave" + IntToString(gCurrentlyCreatingAttackGroup);
        }
        gMyUnitCount += 1;

        // Next add this unit to the proper unit group
        // We first need to see if we are already tracking the requested unit group
        if (UnitGetType(createdUnit) == "SCV") {
            groupNameToUse = "SCVGroup" + IntToString(gCurrentlyCreatingSCVGroup);
        } else {
            groupNameToUse = "AttackWave" + IntToString(gCurrentlyCreatingAttackGroup);
            UnitIssueOrder(createdUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("ArmyRally")), c_orderQueueReplace);
        }
        i = 0;
        for (; i < gMyUnitGroupCount; i += 1) {
            if (gMyUnitGroupList[i].groupName == groupNameToUse) {
                // This is our group that we should use
                foundGroup = true;
                UnitGroupAdd(gMyUnitGroupList[i].group, createdUnit);
                if (gDebugChatOn) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, IntToText(UnitGroupCount(gMyUnitGroupList[i].group, c_unitCountAlive)));
                }

                // We should check if this is our attack group and if it is ready to depart
                if (UnitGetType(createdUnit) != "SCV") {
                    if (gMyUnitGroupList[i].expectedSize <= UnitGroupCount(gMyUnitGroupList[i].group, c_unitCountAlive)) {
                        // This attack group is ready to depart
                      //  UnitGroupIssueOrder(gMyUnitGroupList[i].group, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName("HumanStart")), c_orderQueueReplace);
                          longTravel(gMyUnitGroupList[i].group, gMyUnitGroupList[i].groupName, "HumanStart");
                        // Now move on to the next attack group
                        gCurrentlyCreatingAttackGroup += 1;
                    }
                }
            }
        }
        if (foundGroup == false) {
            // We don't track this group yet, so we should create it
            gMyUnitGroupList[gMyUnitGroupCount].groupName = groupNameToUse;
            gMyUnitGroupList[gMyUnitGroupCount].group = UnitGroup(null, 2, RegionEmpty(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            gMyUnitGroupList[gMyUnitGroupCount].expectedSize = gCurrentAttackGroupExpectedSize;
            UnitGroupAdd(gMyUnitGroupList[gMyUnitGroupCount].group, createdUnit);
            gMyUnitGroupCount += 1;
        }

        // Assign any triggers here
        //t = TriggerCreate("UtilsOnUnitRange");
        //TriggerAddEventUnitRange(t, null, createdUnit, 10.0, true);
        // Assign any special behaviors here
        if (UnitGetType(createdUnit) == "SCV") {
            UnitIssueOrder(createdUnit, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupClosestToPoint(UnitGroupFromId(1), UnitGetPosition(createdUnit))), c_orderQueueReplace);
        }
    } else if (isMine == true && isStructure == true) {
        // The unit is one of our structures
        gMyStructureList[gMyStructureCount].friendly = createdUnit;
        gMyStructureList[gMyStructureCount].assigned = false;
        gMyStructureCount += 1;
        // Assign any triggers here
        // Assign any special behaviors here
        if (UnitGetType(createdUnit) == "Refinery") {
            i = 0;
            for (; i < gMyUnitCount; i += 1) {
                if (UnitGetType(gMyUnitList[i].friendly) == "SCV") {
                    if (UnitOrderCount(gMyUnitList[i].friendly) <= 1) {
                        // Uses c_orderQueueReplace because this should be the unit's sole job. We don't want our refinery scv's to be building things.
                        UnitIssueOrder(gMyUnitList[i].friendly, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), createdUnit), c_orderQueueReplace);
                        numAssigned += 1;
                        if (numAssigned == 3) {
                            break;
                        }
                    }
                }
            }
        }
    } else if (isMine == false && isStructure == false) {
        // The unit is one of the enemy's units
        gEnemyUnitList[gEnemyUnitCount].enemy = createdUnit;
        gEnemyUnitList[gEnemyUnitCount].assignedDamage = 0;
        gEnemyUnitCount += 1;
        // Assign any triggers here
    } else if (isMine == false && isStructure == true) {
        // The unit is one of the enemy's structures
        gEnemyStructureList[gEnemyStructureCount].enemy = createdUnit;
        gEnemyStructureList[gEnemyStructureCount].assignedDamage = 0;
        gEnemyStructureCount += 1;
        // Assign any triggers here
    }

    return true;
}

bool UtilsOnUnitDied(bool ceckConds, bool runActions) {
    // This method should remove the dead unit from our unit list and shift units around in the array for tracking purposes
    unit dyingUnit = EventUnit();
    string unitType = UnitGetType(dyingUnit);
    bool isMine = false;
    bool isStructure = false;
    int i = 0;
    bool foundUnit = false;

    // Determine if the unit that was created is one of my units
    if (UtilsIsUnitMyUnit(dyingUnit)) {
        isMine = true;
    }

    // If we have not already found our unit, determine if the unit that was created is one of my structures
    if (isMine == false) {
        if (UtilsIsUnitMyStructure(dyingUnit)) {
            isMine = true;
            isStructure = true;
        }

        // If we have not already found our unit, determine if the unit that was created is one of the enemy's structures
        if (isMine == false) {
            if (UtilsIsUnitEnemyStructure(dyingUnit)) {
                isStructure = true;
            }

            // If we have failed to determine anything at this point, then we can assume that the unit is one of the enemy's units
        }
    }

    // Handle the unit dying in our memory
    if (isMine == true && isStructure == false) {
        // The unit is one of our units
        UtilsDeleteMyUnit(dyingUnit);
    } else if (isMine == true && isStructure == true) {
        // The unit is one of our structures
        UtilsDeleteMyStructure(dyingUnit);
    } else if (isMine == false && isStructure == false) {
        // The unit is one of the enemy's units
        UtilsDeleteEnemyUnit(dyingUnit);
    } else if (isMine == false && isStructure == true) {
        // The unit is one of the enemy's structures
        UtilsDeleteEnemyStructure(dyingUnit);
    }

    return true;
}

// PURCHASES
void UtilsAddPurchaseRequest(string item, int mineralPrice, int vespenePrice, int priority, string structure) {
    // Append the request to the end of our purchase list
    gPurchaseList[gPurchaseListCount].item = item;
    gPurchaseList[gPurchaseListCount].mineralPrice = mineralPrice;
    gPurchaseList[gPurchaseListCount].vespenePrice = vespenePrice;
    gPurchaseList[gPurchaseListCount].priority = priority;
    gPurchaseList[gPurchaseListCount].structureToPurchaseFrom = structure;
    // Increment our list count
    gPurchaseListCount += 1;
}

void UtilsMadePurchase(int index) {
    int i = index;
    for (; i < gPurchaseListCount - 1; i += 1) {
        gPurchaseList[i].item = gPurchaseList[i+1].item;
        gPurchaseList[i].mineralPrice = gPurchaseList[i+1].mineralPrice;
        gPurchaseList[i].vespenePrice = gPurchaseList[i+1].vespenePrice;
        gPurchaseList[i].priority = gPurchaseList[i+1].priority;
        gPurchaseList[i].structureToPurchaseFrom = gPurchaseList[i+1].structureToPurchaseFrom;
    }

    // Decrement our list count
    gPurchaseListCount -= 1;
}
